all(rownames(adjacencyMatrix(object, weighted = TRUE)[[1]]) == rownames(t(expressionData(object, type = "normalized"))))
hold <- adjacencyMatrix(x = object, weighted = TRUE)
View(hold)
hold[[1]]
data.frame(hold[[1]])
netgsa_results <- NetGSA(A = adjacencyMatrix(x = object, weighted = TRUE),
x = t(expressionData(object, type = "normalized")),
group = networkGroupIDs(object),
pathways = as.matrix(filtered_subnetworks),
lklMethod = "REML",
minsize = min_size)
t(expressionData(object, type = "normalized"))
networkGroupIDs(object)
as.matrix(filtered_subnetworks)
subnetworkMembership(object)
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacencyMatrix(x = object, weighted = TRUE),
x = t(expressionData(object, type = "normalized")),
group = networkGroupIDs(object),
pathways = subnetworkMembership(object),
lklMethod = "REML",
minsize = min_size)
subnetworkMembership(object)
subnetworkMembership(object)
View(subnetworkMembership(object))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacencyMatrix(x = object, weighted = TRUE),
x = t(expressionData(object, type = "normalized")),
group = networkGroupIDs(object),
pathways = t(subnetworkMembership(object)),
lklMethod = "REML",
minsize = min_size)
t(subnetworkMembership(object))
all(rownames(weighted_adjacency_matrices[[1]]) == rownames(t(subnetworkMembership(object))))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacencyMatrix(x = object, weighted = TRUE),
x = t(expressionData(object, type = "normalized")),
group = networkGroupIDs(object),
pathways = t(subnetworkMembership(object)),
lklMethod = "REML",
minsize = min_size)
A_mat <- lapply(adjacencyMatrix(x = object, weighted = TRUE), function(a) {a_full <- as.matrix(bdiag(a))
dimnames(a_full) <- list(do.call(c, lapply(a, rownames)), do.call(c, lapply(a, colnames)))
return(a_full)
})
data("breastcancer2012_subset")
library(netgsa)
data("breastcancer2012_subset")
force(edgelist)
force(group)
force(nonedgelist)
force(pathways)
force(x)
View(x)
networkGroups(object)[1]
adjacency_matrices <- adjacencyMatrix(x = object, weighted = TRUE)
expression_data <- t(expressionData(object, type = "normalized"))
data_groups <- ifelse(networkGroupIDs(object) == networkGroups(object)[1], 1, 2)
subnetworks <- subnetworkMembership(object)
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = t(expressionData(object, type = "normalized")),
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
rownames(adjacency_matrices[[1]])
all(rownames(adjacency_matrices[[1]]) == rownames(adjacency_matrices[[2]]))
all(rownames(adjacency_matrices[[1]]) == rownames(expression_data[[1]]))
all(rownames(adjacency_matrices[[1]]) == rownames(subnetworks))
all(rownames(adjacency_matrices[[1]]) == colnames(subnetworks))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = t(expressionData(object, type = "normalized")),
group = data_groups,
pathways = t(subnetworks),
lklMethod = "REML",
minsize = min_size)
View(subnetworks)
network_info[["Adj"]][[1]][[1]]
all(colnames(adjacency_matrices[[1]]) == colnames(adjacency_matrices[[2]]))
all(rownames(adjacency_matrices[[1]]) == rownames(adjacency_matrices[[2]]))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = t(expressionData(object, type = "normalized")),
group = data_groups,
pathways = t(subnetworks),
lklMethod = "REML",
minsize = min_size)
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expressionData(object, type = "normalized"),
group = data_groups,
pathways = t(subnetworks),
lklMethod = "REML",
minsize = min_size)
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = t(subnetworks),
lklMethod = "REML",
minsize = min_size)
View(expression_data)
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = data.frame(expression_data),
group = data_groups,
pathways = t(subnetworks),
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- lapply(adjacencyMatrix(x = object, weighted = TRUE), function(x) data.frame(x))
View(adjacency_matrices)
adjacency_matrices <- adjacencyMatrix(x = object, weighted = TRUE)
View(adjacency_matrices)
adjacency_matrices <- list(networkGroups(object)[[1]] = list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
networkGroups(object)[[2]]
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]))
View(adjacency_matrices)
adjacency_matrices[[1]][[1]]
View(subnetworks)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]))
expression_data <- t(expressionData(object, type = "normalized"))
data_groups <- ifelse(networkGroupIDs(object) == networkGroups(object)[1], 1, 2)
subnetworks <- subnetworkMembership(object)
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = data.frame(expression_data),
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
View(adjacency_matrices)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
list(edgelist(object)))
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
list(edgeList(object)))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = data.frame(expression_data),
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
subnetworks <- as.matrix(subnetworkMembership(object))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = data.frame(expression_data),
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
list(edgeList(object)))
expression_data <- t(expressionData(object, type = "normalized"))
data_groups <- ifelse(networkGroupIDs(object) == networkGroups(object)[1], 1, 2)
subnetworks <- subnetworkMembership(object)
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
View(adjacency_matrices)
class(adjacency_matrices[[1]][[1]])
class(expression_data)
class(data_groups)
subnetworks <- as.matrix(subnetworkMembership(object))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
View(expression_data)
expression_data <- expressionData(object, type = "normalized")
expression_data <- t(expressionData(object, type = "normalized"))
library(data.table)
expression_data <- as.data.table(t(expressionData(object, type = "normalized")))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
list(as.matrix(edgeList(object))))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
list(as.data.table(edgeList(object))))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]))
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
list(as.data.table(edgeList(object))))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
list(as.matrix(edgeList(object))))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
edgeList(object)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
edgelist = list(as.matrix(edgeList(object))))
View(adjacency_matrices)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
edgelist = list(as.matrix(edgeList(object))))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
edgelist = as.matrix(edgeList(object)))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]),
list(as.matrix(edgeList(object))))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]))
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
View(adjacency_matrices[[1]])
View(adjacency_matrices[[1]][[1]])
class(adjacency_matrices[[1]][[1]])
View(expression_data)
expression_data <- as.matrix(t(expressionData(object, type = "normalized")))
View(adjacency_matrices)
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
# out.netgsa <- NetGSA(adjacencyMatrix(x = object, weighted = TRUE),
#                      x = cbind(separated_conditions_data[[1]], separated_conditions_data[[2]]),
#                      y = c(rep(1, ncol(separated_conditions_data[[1]])), rep(2, ncol(separated_conditions_data[[2]]))),
#                      B = as.matrix(filtered_subnetworks), lklMethod = "REML")
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
expression_data <- t(expressionData(object, type = "normalized"))
##set input variables
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]))
expression_data <- t(expressionData(object, type = "normalized"))
data_groups <- ifelse(networkGroupIDs(object) == networkGroups(object)[1], 1, 2)
subnetworks <- as.matrix(subnetworkMembership(object))
##run netgsa
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
View(netgsa_results)
#add netGSA results to Node list
nodeList(object)[["mean1"]] <- as.vector(netgsa_results$beta[[1]])
nodeList(object)[["mean2"]] <- as.vector(netgsa_results$beta[[2]])
nodeList(object)[["meanchange"]] <- netgsa_results$beta[[2]] - netgsa_results$beta[[1]]
nodeList(object)[["mc.notes"]] <- paste(networkGroups(object)[[2]], 'over', networkGroups(object)[[1]])
#concatenate netGSA summary output
res <- data.frame(CCsummary(object)[CCsummary(object)$number_of_nodes >= min_size, ],
"NetGSA_pval"= netgsa_results$p.value,
"NetGSA_pFDR"= p.adjust(netgsa_results$p.value, "BH"),
check.names = FALSE)
min_size = 5
##run netgsa
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
#add netGSA results to Node list
nodeList(object)[["mean1"]] <- as.vector(netgsa_results$beta[[1]])
nodeList(object)[["mean2"]] <- as.vector(netgsa_results$beta[[2]])
nodeList(object)[["meanchange"]] <- netgsa_results$beta[[2]] - netgsa_results$beta[[1]]
nodeList(object)[["mc.notes"]] <- paste(networkGroups(object)[[2]], 'over', networkGroups(object)[[1]])
#concatenate netGSA summary output
res <- data.frame(CCsummary(object)[CCsummary(object)$number_of_nodes >= min_size, ],
"NetGSA_pval"= netgsa_results$p.value,
"NetGSA_pFDR"= p.adjust(netgsa_results$p.value, "BH"),
check.names = FALSE)
netgsa_results$p.value
##set input variables
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]))
expression_data <- t(expressionData(object, type = "input"))
data_groups <- ifelse(networkGroupIDs(object) == networkGroups(object)[1], 1, 2)
subnetworks <- as.matrix(subnetworkMembership(object))
##run netgsa
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = min_size)
#add netGSA results to Node list
nodeList(object)[["mean1"]] <- as.vector(netgsa_results$beta[[1]])
nodeList(object)[["mean2"]] <- as.vector(netgsa_results$beta[[2]])
nodeList(object)[["meanchange"]] <- netgsa_results$beta[[2]] - netgsa_results$beta[[1]]
nodeList(object)[["mc.notes"]] <- paste(networkGroups(object)[[2]], 'over', networkGroups(object)[[1]])
#concatenate netGSA summary output
res <- data.frame(CCsummary(object)[CCsummary(object)$number_of_nodes >= min_size, ],
"NetGSA_pval"= netgsa_results$results$pval,
"NetGSA_pFDR"= netgsa_results$results$pFdr,
check.names = FALSE)
CCsummary(object)[CCsummary(object)$number_of_nodes >= min_size, ]
netgsa_results$results$pval
CCsummary(object)
##run netgsa
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = subnetworks,
lklMethod = "REML",
minsize = 5)
##set input variables
adjacency_matrices <- list(list(adjacencyMatrix(x = object, weighted = TRUE)[[1]]),
list(adjacencyMatrix(x = object, weighted = TRUE)[[2]]))
expression_data <- t(expressionData(object, type = "input"))
data_groups <- ifelse(networkGroupIDs(object) == networkGroups(object)[1], 1, 2)
subnetworks <- as.matrix(subnetworkMembership(object))
##filter subnetworks to only include those greater than or equal to min_size
filtered_subnetworks <- subnetworkMembership(object)
filtered_subnetworks <- as.matrix(filtered_subnetworks[rowSums(filtered_subnetworks) >= min_size, ])
##run netgsa
netgsa_results <- NetGSA(A = adjacency_matrices,
x = expression_data,
group = data_groups,
pathways = filtered_subnetworks,
lklMethod = "REML",
minsize = min_size)
#add netGSA results to Node list
nodeList(object)[["mean1"]] <- as.vector(netgsa_results$beta[[1]])
nodeList(object)[["mean2"]] <- as.vector(netgsa_results$beta[[2]])
nodeList(object)[["meanchange"]] <- netgsa_results$beta[[2]] - netgsa_results$beta[[1]]
nodeList(object)[["mc.notes"]] <- paste(networkGroups(object)[[2]], 'over', networkGroups(object)[[1]])
#concatenate netGSA summary output
res <- data.frame(CCsummary(object)[CCsummary(object)$number_of_nodes >= min_size, ],
"NetGSA_pval"= netgsa_results$results$pval,
"NetGSA_pFDR"= netgsa_results$results$pFdr,
check.names = FALSE)
View(res)
install.packages("BiocParallel.FutureParam")
BiocManager::install("BiocParallel.FutureParam")
install.packages(c("roxygen2", "usethis", "available"))
install.packages(c("roxygen2", "usethis", "available"))
install.packages(c("roxygen2", "usethis", "available"))
BiocManager::install("BiocParallel.FutureParam")
library(devtools)
library(roxygen2)
library(available)
library(usethis)
devtools::build()
BiocManager::install("Future.apply")
BiocManager::install("future.apply")
?bpapply()
devtools::document()
usethis::use_package("BiocParallel")
devtools::document()
install.packages("netgsa")
devtools::document()
devtools::document()
install.packages("netgsa")
devtools::load_all("~/Documents/Karnovsky_lab/DNEAdev/", reset = TRUE, recompile = TRUE)

ensembl_cluster <- function(adjacency_graph,
                            consensus,
                            graph_weights = NULL){


  ##initiate list
  clustering_results <- vector("list", length = 7)

  ##perform clustering
  clustering_results[[1]] <- cluster_edge_betweenness(adjacency_graph, weights = graph_weights)
  clustering_results[[2]] <- cluster_fast_greedy(adjacency_graph, weights = graph_weights)
  clustering_results[[3]] <- cluster_infomap(adjacency_graph, e.weights = graph_weights)
  clustering_results[[4]] <- cluster_label_prop(adjacency_graph, weights = graph_weights)
  clustering_results[[5]] <- cluster_louvain(adjacency_graph, weights = graph_weights)
  clustering_results[[6]] <- cluster_walktrap(adjacency_graph, weights = graph_weights)
  clustering_results[[7]] <- tryCatch(cluster_leading_eigen(adjacency_graph, weights = graph_weights),
                                      error = function(some_error){
                                        message('cluster_leading_eigen() method failed and will be discarded from consensus clustering.')
                                        message('This is a known issue with a dependency and will not affect your results')
                                        return(NA)
                                      })

  return(clustering_results)
}
#' Performs consensus clustering
#'
#' This function will take as input an adjacency matrix graph from the determined networks and perform
#' consensus clustering using one of several methods to choose from. The output results in sub-network
#' classification for the nodes within the network.
#'
#' @param graph An adjacency matrix of the determined network
#' @param K The number of iterations for clustering. This parameter is not necessary for default "ensemble"
#' @param tau The consensus probabilty threshold for agreement among clustering runs
#' @param method The consensus clustering method to be used. The options are as follows:\n
#'        *1. "ensemble" - *indicates that all seven of the available clustering methods
#'        (cluster_edge_betweenness, cluster_fast_greedy, cluster_infomap, cluster_label_prop,
#'        cluster_leading_eigen, cluster_louvain, cluster_walktrap) should be used.\n
#'        *2. "lpm" - *utilizes the cluster_label_prop, cluster_infomap, and cluster_walktrap methods.\n
#'        *3. "walktrap" - *utilizes only cluster_walktrap.\n
#'        *4. "infomap" - *utilizes only infomap.\n
#' @param num_iterations The number of clustering iterations to perform - this parameter not relevant
#'        for the "ensemble" method. Default is 10 iterations.
#' @param maxIter Maximum number of iterations to perform trying to reach consensus.
#'
#' @return Sub-network determinations for the nodes within the input network
#'
#' @import igraph
#' @import furrr
#' @noRd
run_consensus_cluster <- function(adjacency_graph,
                                  num_iterations=10,
                                  tau=0.5,
                                  maxIter=5){

  ##cluster the adjacency graph
  clustering_results <- ensembl_cluster(adjacency_graph, graph_weights = NULL)

  ##get consensus matrix
  consensus_matrix <- getConsensusMatrix(clustering_results[!(is.na(clustering_results))])

  #initiate first iteration
  iter <- 0
  while(length(table(consensus_matrix)) > 2 && iter < maxIter){

    #run clustering algorithms until a stable consensus is reached
    diag(consensus_matrix) <- 0
    threshold_consensus_matrix <- consensus_matrix * (consensus_matrix > tau)

    threshold_consensus_graph <- graph.adjacency(threshold_consensus_matrix,
                                                 mode="undirected",
                                                 weighted = TRUE)

    final_consensus_cluster <- ensembl_cluster(threshold_consensus_graph,
                                               graph_weights = E(threshold_consensus_graph)$weight)

    consensus_matrix <- getConsensusMatrix(final_consensus_cluster[!(is.na(final_consensus_cluster))])
    iter <- iter + 1
  }
  new.order <- order(final_consensus_cluster[[1]]$membership)
  return(list(final_consensus_cluster = final_consensus_cluster[[1]]$membership,
              consensus_matrix = consensus_matrix,
              order = new.order,iter = iter))
}
